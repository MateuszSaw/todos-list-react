{"version":3,"sources":["GlobalStyle.js","common/Container/styled.js","common/Container/index.js","common/Section/styled.js","common/Section/index.js","common/Header/index.js","features/author/AuthorPage.js","features/tasks/tasksLocalStorage.js","features/tasks/tasksSlice.js","features/tasks/TasksPage/Form/styled.js","features/tasks/Input/index.js","features/tasks/TasksPage/Form/index.js","features/tasks/TasksPage/TaskList/styled.js","features/tasks/TasksPage/searchQueryParamName.js","routes.js","features/tasks/TasksPage/Search/queryParameters.js","features/tasks/TasksPage/TaskList/index.js","features/tasks/TasksPage/Buttons/styled.js","features/tasks/Button/index.js","features/tasks/TasksPage/Buttons/index.js","features/tasks/TasksPage/Search/styled.js","features/tasks/TasksPage/Search/index.js","features/tasks/TasksPage/ExampleButton/index.js","features/tasks/TasksPage/index.js","features/tasks/TaskPage/index.js","Navigation/styled.js","Navigation/index.js","App.js","reportWebVitals.js","features/tasks/getExampleTasks.js","features/tasks/tasksSaga.js","rootSaga.js","store.js","index.js","theme.js"],"names":["GlobalStyle","createGlobalStyle","Wrapper","styled","main","Container","children","section","theme","colors","white","athensGray","Header","header","breakpoint","mobileMax","Title","h2","Body","div","Section","title","body","extraHeaderContent","localStorageKey","saveTasksInLocalStorage","tasks","localStorage","setItem","JSON","stringify","tasksSlice","createSlice","name","initialState","parse","getItem","hideDone","loading","reducers","addTask","task","payload","push","toggleHideDone","state","toggleTaskDone","taskId","index","findIndex","id","done","removeTask","splice","setAllDone","fetchExampleTasks","exampleTasksSuccess","exampleTasksError","actions","selectTasksState","selectTasks","selectHideDone","selectExampleTasksLoading","selectIsEveryTaskDone","every","selectAreTaskEmpty","length","StyledForm","form","Button","button","teal","input","Form","useState","newTaskContent","setNewTaskContent","inputRef","useRef","dispatch","useDispatch","onSubmit","event","preventDefault","trimmedNewTaskContent","trim","content","nanoid","current","focus","Input","value","className","placeholder","onChange","target","ref","List","ul","Item","li","hidden","css","Content","p","toggleDone","forestGreen","remove","crimson","StyledLink","Link","toTask","useQueryParameter","key","location","useLocation","URLSearchParams","search","get","TaskList","query","searchQueryParamName","useSelector","filter","toUpperCase","includes","selectTasksByQuery","map","onClick","to","Buttons","isEveryTaskDone","areTaskEmpty","disabled","replaceQueryParameter","history","useHistory","searchParams","undefined","delete","set","newSearch","toString","pathname","useReplaceQueryParameter","TasksPage","ExampleButton","Search","TaskPage","useParams","find","getTaskById","activeClassName","StyledNavLink","NavLink","attrs","Navigation","path","AuthorPage","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","getExampleTasks","a","fetch","response","ok","Error","statusText","json","fetchExampleTasksHandler","saveTasksInLocalStorageHandler","tasksSaga","delay","call","exampleTasks","put","alert","select","takeLatest","type","takeEvery","rootSaga","all","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","tasksReducer","middleware","run","ReactDOM","render","StrictMode","App","document","getElementById"],"mappings":"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","file":"static/js/main.8f271a8e.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalStyle = createGlobalStyle`\n  html {\n    box-sizing: border-box;\n  }\n\n  *, ::after, ::before {\n    box-sizing: inherit;\n  }\n\n  body{\n    background: #EEEDEF;\n    font-family: 'Lato', sans-serif;\n  }\n`;\n\n\n\n\n","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.main`\r\n  max-width: 1000px;\r\n  padding: 30px;\r\n  margin: 0 auto;\r\n`;","import React from \"react\";\r\nimport { Wrapper } from \"./styled\"\r\n\r\nconst Container = ({ children }) => (\r\n    <Wrapper>\r\n        {children}\r\n    </Wrapper>\r\n)\r\n\r\nexport default Container;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.section`\r\n  background: ${({ theme }) => theme.colors.white};\r\n  margin-bottom: 10px;\r\n  box-shadow: 0 0 5px ${({ theme }) => theme.colors.athensGray};\r\n`;\r\n\r\nexport const Header = styled.header`\r\n  border-bottom: 1px solid ${({ theme }) => theme.colors.athensGray};\r\n  padding: 20px;\r\n  display: grid;\r\n  grid-template-columns: auto auto;\r\n  grid-gap: 20px;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n\r\n  @media(max-width: ${({ theme }) => theme.breakpoint.mobileMax}px){\r\n    grid-template-columns: 1fr;\r\n  }\r\n\r\n`;\r\n\r\nexport const Title = styled.h2`\r\n  margin: 0;\r\n  font-size: 20px;\r\n`;\r\nexport const Body = styled.div`\r\n  padding: 20px;\r\n`;","import React from \"react\";\r\nimport { Wrapper, Header, Title, Body } from \"./styled\"\r\n\r\nconst Section = ({ title, body, extraHeaderContent }) => (\r\n  <Wrapper>\r\n    <Header>\r\n      <Title>\r\n        {title}\r\n      </Title>\r\n      {extraHeaderContent}\r\n    </Header>\r\n    <Body>\r\n      {body}\r\n    </Body>\r\n  </Wrapper>\r\n)\r\n\r\nexport default Section;","import React from \"react\";\r\n\r\nconst Header = ({ title })=> (\r\n<header>\r\n    <h1>{title}</h1>\r\n </header>\r\n)\r\n\r\nexport default Header;","import React from \"react\";\r\nimport Container from \"../../common/Container\";\r\nimport Section from \"../../common/Section\";\r\nimport Header from \"../../common/Header\";\r\n\r\nexport default () =>\r\n  (\r\n    <Container>\r\n      <Header title=\"O autorze\"/>\r\n      <Section title=\"Mateusz Sawicki\"\r\n        body={\r\n          <>\r\n            Cześć jestem Mateusz 😊. Od jakiegoś czasu uczę się programować.\r\n            Chciałbym zostać Frontend Developerem.<br/>\r\n            Uwielbiam wszystko co związane z piłką nożną - to moje hobby ⚽.\r\n          </>\r\n        }\r\n      />\r\n    </Container>\r\n  );\r\n\r\n\r\n","const localStorageKey = \"tasks\";\r\n\r\nexport const saveTasksInLocalStorage = tasks =>\r\n  localStorage.setItem(localStorageKey, JSON.stringify(tasks));\r\n\r\nexport const getTasksFromLocalStorage = () =>\r\n  JSON.parse(localStorage.getItem(localStorageKey)) || [];\r\n\r\n","import { createSlice } from '@reduxjs/toolkit';\r\nimport { getTasksFromLocalStorage } from './tasksLocalStorage';\r\n\r\nconst tasksSlice = createSlice({\r\n  name: 'tasks',\r\n  initialState: {\r\n    tasks: getTasksFromLocalStorage(),\r\n    hideDone: false,\r\n    loading: false,\r\n  },\r\n  reducers: {\r\n    addTask: ({ tasks }, { payload: task }) => {\r\n      tasks.push(task);\r\n    },\r\n    toggleHideDone: state => {\r\n      state.hideDone = !state.hideDone;\r\n    },\r\n    toggleTaskDone: ({ tasks }, { payload: taskId }) => {\r\n    const index = tasks.findIndex(({ id }) => id === taskId);\r\n    tasks[index].done = !tasks[index].done;\r\n    },\r\n    removeTask: ({ tasks }, { payload: taskId }) => {\r\n      const index = tasks.findIndex(({ id }) => id === taskId);\r\n      tasks.splice(index, 1);\r\n    },\r\n    setAllDone: ({ tasks }) => {\r\n      for (const task of tasks) {\r\n        task.done = true;\r\n        }\r\n    },\r\n    fetchExampleTasks: (state) => {\r\n      state.loading = true;\r\n    },\r\n    exampleTasksSuccess: (state, { payload: tasks}) => {\r\n      state.tasks = tasks;\r\n      state.loading = false;\r\n    },\r\n    exampleTasksError: (state) => {\r\n      state.loading = false;\r\n    }\r\n  },\r\n});\r\n\r\nexport const {\r\n  addTask,\r\n  toggleHideDone,\r\n  toggleTaskDone,\r\n  removeTask,\r\n  setAllDone,\r\n  fetchExampleTasks,\r\n  exampleTasksSuccess,\r\n  exampleTasksError,\r\n} = tasksSlice.actions;\r\n\r\nexport const selectTasksState = state => state.tasks;\r\n\r\nexport const selectTasks = state => selectTasksState(state).tasks;\r\nexport const selectHideDone = state => selectTasksState(state).hideDone;\r\nexport const selectExampleTasksLoading = state => selectTasksState(state).loading;\r\nexport const selectIsEveryTaskDone = state => selectTasks(state).every(({ done }) => done);\r\nexport const selectAreTaskEmpty = state => selectTasks(state).length === 0;\r\n\r\n\r\nexport const getTaskById = (state, taskId) =>\r\nselectTasks(state).find(({ id }) => id === taskId);\r\n\r\nexport const selectTasksByQuery = (state, query) => {\r\n  const tasks = selectTasks(state);\r\n  if(!query || query.trim() === \"\") {\r\n    return tasks;\r\n  }\r\n  return tasks.filter(({ content }) =>\r\n    content.toUpperCase().includes(query.trim().toUpperCase()));\r\n}\r\n\r\nexport default tasksSlice.reducer;","import styled from \"styled-components\";\r\n\r\nexport const StyledForm = styled.form`\r\n  display: grid;\r\n  grid-template-columns: 1fr auto;\r\n  grid-gap: 20px;\r\n\r\n  @media(max-width: ${({ theme }) => theme.breakpoint.mobileMax}px){\r\n    grid-template-columns: 1fr;\r\n  }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  background:${({ theme }) => theme.colors.teal};\r\n  color:${({ theme }) => theme.colors.athensGray};\r\n  border: none;\r\n  padding: 10px;\r\n  cursor: pointer;\r\n  transition: 0.5s;\r\n\r\n  &:hover{\r\n    filter: brightness(110%);\r\n    transform: scale(1.1);\r\n  }\r\n\r\n  &:active{\r\n    filter: brightness(120%);\r\n  }\r\n\r\n`;","import styled from \"styled-components\";\r\n\r\nexport default styled.input`\r\n  padding: 10px;\r\n  border: 1px solid ${({ theme }) => theme.colors.athensGray};\r\n`;","import { nanoid } from \"@reduxjs/toolkit\";\r\nimport React, { useRef, useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { addTask } from \"../../tasksSlice\";\r\nimport { StyledForm, Button } from \"./styled\"\r\nimport Input from \"../../Input\";\r\n\r\nconst Form = () => {\r\n  const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n  const inputRef = useRef(null);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const onFormSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    const trimmedNewTaskContent = newTaskContent.trim();\r\n\r\n    if (!trimmedNewTaskContent){\r\n      return;\r\n    }\r\n\r\n    dispatch(addTask({\r\n      content: trimmedNewTaskContent,\r\n      done: false,\r\n      id: nanoid(),\r\n    }));\r\n\r\n    setNewTaskContent(\"\");\r\n    inputRef.current.focus();\r\n  };\r\n\r\n  return (\r\n    <StyledForm onSubmit={onFormSubmit}>\r\n      <Input\r\n        value={newTaskContent}\r\n        className=\"form__input\"\r\n        placeholder=\"Co jest do zrobienia?\"\r\n        onChange={({ target }) => setNewTaskContent(target.value)}\r\n        ref={inputRef}\r\n      />\r\n      <Button>\r\n        Dodaj zadanie\r\n      </Button>\r\n    </StyledForm>\r\n  )\r\n};\r\n\r\nexport default Form;","import { Link } from \"react-router-dom\";\r\nimport styled, { css } from \"styled-components\";\r\n\r\nexport const List = styled.ul`\r\n  list-style: none;\r\n  padding: 0;\r\n  margin: 0;\r\n\r\n`;\r\n\r\nexport const Item = styled.li`\r\n  display: grid;\r\n  grid-template-columns: auto 1fr auto;\r\n  align-items: center;\r\n  grid-gap: 10px;\r\n  padding: 10px;\r\n  border-bottom: 1px solid ${({ theme }) => theme.colors.athensGray};\r\n\r\n  ${({ hidden }) => hidden && css`\r\n    display: none;\r\n  `}\r\n`;\r\n\r\nexport const Content = styled.p`\r\n  overflow-wrap: anywhere;\r\n\r\n  ${({ done }) => done && css`\r\n  text-decoration: line-through;\r\n  `}\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    width: 25px;\r\n    height: 25px;\r\n    border: none;\r\n    color: ${({ theme }) => theme.colors.white};\r\n    cursor: pointer;\r\n    padding: 0;\r\n    transition: background 0.5s;\r\n\r\n    ${({ toggleDone }) => toggleDone && css`\r\n      background: ${({ theme }) => theme.colors.forestGreen};\r\n\r\n      &:hover {\r\n        filter: brightness(110%);\r\n      }\r\n      &:active {\r\n        filter: brightness(120%);\r\n      }\r\n    `}\r\n\r\n    ${({ remove }) => remove && css`\r\n    background: ${({ theme }) => theme.colors.crimson};\r\n\r\n      &:hover{\r\n        filter: brightness(110%);\r\n      }\r\n      &:active{\r\n        filter: brightness(120%);\r\n      }\r\n    `}\r\n`;\r\n\r\n\r\nexport const StyledLink = styled(Link)`\r\n    text-decoration: none;\r\n    color: ${({ theme }) => theme.colors.teal}\r\n`;","export default \"szukaj\";","export const toTasks = () => \"/zadania\";\r\nexport const toAuthor = () => \"/author\";\r\n\r\nexport const toTask = ({ id } = { id: \":id\" }) => `/zadania${id}`;","import { useLocation, useHistory } from \"react-router-dom\";\r\n\r\n\r\nexport const useQueryParameter = key => {\r\n  const location = useLocation();\r\n  const searchParams = new URLSearchParams(location.search);\r\n  return searchParams.get(key);\r\n};\r\n\r\nexport const useReplaceQueryParameter = () => {\r\n  const history = useHistory();\r\n  const location = useLocation();\r\n\r\n  return ({ key, value }) => {\r\n    const searchParams = new URLSearchParams(location.search);\r\n\r\n    if (value === undefined){\r\n      searchParams.delete(key);\r\n    } else {\r\n      searchParams.set(key, value);\r\n    }\r\n    const newSearch = searchParams.toString();\r\n    history.push(`${location.pathname}?${newSearch}`);\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { List, Item, Content, Button, StyledLink } from \"./styled\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { toggleTaskDone, removeTask, selectHideDone, selectTasksByQuery } from \"../../tasksSlice\";\r\nimport searchQueryParamName from \"../searchQueryParamName\";\r\nimport { toTask } from \"../../../../routes\";\r\nimport { useQueryParameter } from \"../Search/queryParameters\";\r\n\r\nconst TaskList = () => {\r\n  const query = useQueryParameter(searchQueryParamName);\r\n  const tasks = useSelector(state => selectTasksByQuery(state, query));\r\n  const hideDone = useSelector(selectHideDone);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  return(\r\n    <List>\r\n      {tasks.map(task => (\r\n        <Item\r\n          key={task.id}\r\n          hidden={task.done && hideDone}\r\n        >\r\n          <Button\r\n            toggleDone\r\n            onClick={() => dispatch(toggleTaskDone(task.id))}\r\n          >\r\n            {task.done ? \"✔\" :\"\"}\r\n          </Button>\r\n          <Content done={task.done}>\r\n            <StyledLink to={toTask({ id: task.id })}>\r\n              {task.content}\r\n            </StyledLink>\r\n          </Content>\r\n          <Button\r\n            remove\r\n            onClick={() => dispatch(removeTask(task.id))}\r\n          >\r\n            🗑\r\n          </Button>\r\n        </Item>\r\n      ))}\r\n    </List>\r\n  )\r\n};\r\nexport default TaskList;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  border: none;\r\n  color: ${({ theme }) => theme.colors.teal};\r\n  background: none;\r\n  cursor: pointer;\r\n  transition: color 1s;\r\n\r\n  @media(max-width: ${({ theme }) => theme.breakpoint.mobileMax}px){\r\n    flex-basis: 100%;\r\n        margin: 10px;\r\n  }\r\n\r\n  &:hover{\r\n    filter: brightness(110%);\r\n  }\r\n  &:active{\r\n    filter: brightness(120%);\r\n  }\r\n\r\n  &:disabled{\r\n    color: ${({ theme }) => theme.colors.athensGray};\r\n  }\r\n\r\n`;","import styled from \"styled-components\";\r\n\r\nexport default styled.button`\r\n  border: none;\r\n  color: ${({ theme }) => theme.colors.teal};\r\n  background: none;\r\n  cursor: pointer;\r\n  transition: filter 0.5s;\r\n\r\n  @media(max-width: ${({ theme }) => theme.breakpoint.mobileMax}px){\r\n    flex-basis: 100%;\r\n        margin: 10px;\r\n  }\r\n\r\n  &:hover{\r\n    filter: brightness(110%);\r\n  }\r\n  &:active{\r\n    filter: brightness(120%);\r\n  }\r\n\r\n  &:disabled{\r\n    color: ${({ theme }) => theme.colors.athensGray};\r\n  }\r\n`","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n  toggleHideDone,\r\n  setAllDone,\r\n  selectIsEveryTaskDone,\r\n  selectAreTaskEmpty,\r\n  selectHideDone,\r\n} from \"../../tasksSlice\";\r\nimport  { Wrapper } from \"./styled\";\r\nimport Button from \"../../Button\"\r\n\r\nconst Buttons = () => {\r\n  const isEveryTaskDone = useSelector(selectIsEveryTaskDone);\r\n  const areTaskEmpty = useSelector(selectAreTaskEmpty);\r\n  const hideDone = useSelector(selectHideDone);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <Wrapper>\r\n      {!areTaskEmpty && (\r\n      <>\r\n        <Button onClick={() => dispatch(toggleHideDone())}>\r\n        {hideDone ? \"Pokaż\" : \"Ukryj\"} ukończone\r\n        </Button>\r\n        <Button\r\n          onClick = {() => dispatch(setAllDone())}\r\n          disabled = {isEveryTaskDone}\r\n        >\r\n          Ukończ wszystkie\r\n        </Button>\r\n        </>\r\n      )}\r\n    </Wrapper>\r\n  );\r\n}\r\n\r\nexport default Buttons;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\ndisplay: grid;\r\ngrid-template-columns: 1fr;\r\n`\r\n","import React from \"react\";\r\nimport Input from \"../../Input\";\r\nimport searchQueryParamName from \"../searchQueryParamName\";\r\nimport { Wrapper } from \"./styled\";\r\nimport { useQueryParameter, useReplaceQueryParameter } from \"./queryParameters\"\r\n\r\nexport default () => {\r\n\r\n  const query = useQueryParameter(searchQueryParamName);\r\n  const replaceQueryParameter = useReplaceQueryParameter();\r\n\r\n  const onInputChange = ({ target }) => {\r\n    replaceQueryParameter({\r\n      key: searchQueryParamName,\r\n      value: target.value.trim() !== \"\" ? target.value : undefined\r\n    })\r\n  };\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Input\r\n        placeholder=\"filtruj zadania\"\r\n        value = {query || \"\"}\r\n        onChange={onInputChange}\r\n    />\r\n    </Wrapper>\r\n  )\r\n}","import React from \"react\";\r\nimport Button from \"../../Button\";\r\nimport { fetchExampleTasks, selectExampleTasksLoading } from \"../../tasksSlice\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nexport default () => {\r\n  const dispatch = useDispatch();\r\n  const loading = useSelector(selectExampleTasksLoading);\r\n\r\n  return(\r\n  <Button\r\n    onClick={() => dispatch(fetchExampleTasks())}\r\n    disabled= {loading}\r\n  >\r\n    {loading ? \"Ładowanie...\" : \"Pobierz przykładowe zadania\"}\r\n  </Button>\r\n  );\r\n};","import React from \"react\";\nimport Form from \"./Form\";\nimport TaskList from \"./TaskList\";\nimport Buttons from \"./Buttons\";\nimport Section from \"../../../common/Section\";\nimport Header from \"../../../common/Header\";\nimport Container from \"../../../common/Container\";\nimport Search from \"./Search\";\nimport ExampleButton from \"./ExampleButton\";\n\n\nfunction TasksPage() {\n\n  return (\n    <Container>\n      <Header title=\"Lista zadań\"/>\n      <Section title=\"Dodaj nowe zadanie\"\n        body={<Form />}\n        extraHeaderContent ={<ExampleButton />}\n      />\n      <Section title=\"Wyszukiwarka\"\n        body={<Search />}\n      />\n      <Section title=\"Lista zadań\"\n        body={<TaskList />}\n        extraHeaderContent ={<Buttons />}\n      />\n    </Container>\n  );\n}\n\nexport default TasksPage;\n","import React from \"react\";\r\nimport Section from \"../../../common/Section\";\r\nimport Header from \"../../../common/Header\";\r\nimport Container from \"../../../common/Container\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getTaskById } from \"../tasksSlice\";\r\n\r\nfunction TaskPage() {\r\n  const { id } =useParams();\r\n  const task = useSelector(state => getTaskById(state, id));\r\n  return (\r\n    <Container>\r\n      <Header title=\"Szczegóły zadania\"/>\r\n      <Section title={task? task.content : \"Nie znaleziono zadania 😥\"}\r\n        body = {task &&\r\n          <>\r\n            <strong>Ukończono:</strong> {task.done ? \"Tak\" : \"Nie\"}\r\n          </>\r\n        }\r\n\r\n\r\n      />\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default TaskPage;\r\n","import { NavLink } from \"react-router-dom\";\r\nimport styled, { css } from \"styled-components\";\r\n\r\nconst activeClassName = \"active\";\r\n\r\nexport const StyledNavLink = styled(NavLink).attrs(() => ({\r\n  activeClassName,\r\n}))`\r\n  color: ${({ theme }) => theme.colors.white};\r\n  text-decoration: none;\r\n\r\n  &.${activeClassName} {\r\n    font-weight: bold;\r\n}\r\n`;\r\n\r\nexport const List = styled.ul`\r\n  background-color: ${({ theme }) => theme.colors.teal};\r\n  margin: 0;\r\n  padding: 10px;\r\n  list-style: none;\r\n  display: flex;\r\n  justify-content: center;\r\n`;\r\n\r\nexport const Item = styled.li`\r\npadding: 15px;\r\nfont-size: 18px;\r\n`;","import React from \"react\";\r\nimport { Item, List, StyledNavLink } from \"./styled\";\r\nimport { toAuthor, toTasks } from \"../routes\";\r\n\r\nexport default () => {\r\n  return (\r\n    <nav>\r\n      <List>\r\n        <Item>\r\n          <StyledNavLink to={toTasks()}>Zadania</StyledNavLink>\r\n        </Item>\r\n        <Item>\r\n          <StyledNavLink to={toAuthor()}>O autorze</StyledNavLink>\r\n        </Item>\r\n      </List>\r\n    </nav>\r\n  );\r\n};","import React from 'react';\r\nimport { Switch, Route, HashRouter, Redirect } from \"react-router-dom\";\r\nimport AuthorPage from \"./features/author/AuthorPage\"\r\nimport TasksPage from './features/tasks/TasksPage';\r\nimport TaskPage from './features/tasks/TaskPage';\r\nimport Navigation from \"./Navigation\";\r\nimport { toAuthor, toTask, toTasks } from './routes';\r\n\r\nexport default () => (\r\n  <HashRouter>\r\n    <Navigation />\r\n      <Switch>\r\n        <Route path={toTask()}>\r\n          <TaskPage />\r\n        </Route>\r\n        <Route path={toTasks()}>\r\n          <TasksPage />\r\n        </Route>\r\n        <Route path={toAuthor()}>\r\n          <AuthorPage />\r\n        </Route>\r\n        <Route path=\"/\">\r\n          <Redirect to=\"/zadania\" />\r\n        </Route>\r\n      </Switch>\r\n  </HashRouter>\r\n);","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export const getExampleTasks = async () => {\r\n  const response = await fetch(\"/todos-list-react/exampleTasks.json\");\r\n\r\n  if(!response.ok) {\r\n    new Error(response.statusText);\r\n  }\r\n\r\n  return await response.json();\r\n};","import { takeEvery, call, put, select, takeLatest, delay } from \"redux-saga/effects\";\r\nimport { getExampleTasks } from \"./getExampleTasks\";\r\nimport { saveTasksInLocalStorage } from \"./tasksLocalStorage\";\r\nimport { fetchExampleTasks, exampleTasksSuccess,  selectTasks, exampleTasksError} from \"./tasksSlice\";\r\n\r\nfunction* fetchExampleTasksHandler(){\r\n  try {\r\n    yield delay(1000);\r\n    const exampleTasks = yield call(getExampleTasks);\r\n    yield put(exampleTasksSuccess(exampleTasks));\r\n  } catch (error){\r\n    yield call(alert, \"coś poszło nie tak!\");\r\n    yield put(exampleTasksError());\r\n  }\r\n}\r\n\r\nfunction* saveTasksInLocalStorageHandler() {\r\n  const tasks = yield select(selectTasks);\r\n  yield call(saveTasksInLocalStorage, tasks);\r\n}\r\n\r\nexport function* tasksSaga(){\r\n  yield takeLatest(fetchExampleTasks.type, fetchExampleTasksHandler);\r\n  yield takeEvery(\"*\", saveTasksInLocalStorageHandler);\r\n}","import { all } from \"redux-saga/effects\";\r\nimport { tasksSaga } from \"./features/tasks/tasksSaga\";\r\n\r\nexport default function* rootSaga() {\r\n  yield all([\r\n    tasksSaga(),\r\n  ])\r\n};","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport tasksReducer from './features/tasks/tasksSlice';\r\nimport rootSaga from \"./rootSaga\";\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    tasks: tasksReducer,\r\n  },\r\n  middleware: [sagaMiddleware],\r\n});\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ThemeProvider } from 'styled-components';\nimport { Provider } from 'react-redux';\nimport { GlobalStyle } from './GlobalStyle';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { theme } from './theme';\nimport store from './store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <GlobalStyle />\n        <App />\n      </ThemeProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","export const theme = {\r\n  breakpoint: {\r\n    mobileMax: 767,\r\n  },\r\n  colors: {\r\n    teal: \"#008080\",\r\n    athensGray: \"#EEEDEF\",\r\n    white: \"#fff\",\r\n    forestGreen: \"#228c22\",\r\n    crimson: \"#db143c\",\r\n  }\r\n};"],"sourceRoot":""}